local config = nil
local internal = require("wikiplugin_internal")

local function setup(config_local)
    local function check_key_present(key)
        if config_local[key] == nil then
            error("wikiplugin setup config missing key '" .. key .. "'")
        end
    end
    check_key_present('home_path')
    check_key_present('note_id_timestamp_format')
    check_key_present('date_format')
    check_key_present('time_format')

    config = config_local

    local augroup = vim.api.nvim_create_augroup("wikiplugin", {})
    vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
        group = augroup,
        pattern = vim.fn.fnamemodify(config_local.home_path, ":p") .. "*.md", -- use :p to make sure that there is a / at the end because the autocommand wont work if the path has a double slash
        command = "set filetype=wikipluginnote",
    })
end

local function insert_link_attach_mappings(prompt_bufnr, map)
    local actions = require "telescope.actions"
    local action_state = require "telescope.actions.state"

    actions.select_default:replace(function()
        actions.close(prompt_bufnr)
        local selection = action_state.get_selected_entry()
        local note_path
        if selection then
            note_path = selection.note_path
        else
            note_path = nil
        end

        internal.insert_link_to_path_at_cursor_or_create(config, note_path, nil)
    end)
    return true
end
local function search_by_title(attach_mappings, opts)
    local pickers = require "telescope.pickers"
    local finders = require "telescope.finders"
    local conf = require("telescope.config").values

    opts = opts or {}
    pickers.new(opts, {
        prompt_title = "search notes by title",

        finder = finders.new_oneshot_job(
            {"ag", "^title:", config.home_path}, -- TODO: this does not work perfectly because it can match any 'title: ' that appears outside of the frontmatter but whatever
            {
                entry_maker = function(entry)
                    local parts = vim.split(entry, ':')

                    local note_title = parts[4]:match("^%s*(.-)%s*$") -- TODO: put this into a trim whitespace function
                    local filepath = vim.fn.fnamemodify(parts[1], ":p")

                    return {
                        value = entry,
                        display = note_title,
                        ordinal = note_title,
                        note_path = filepath,
                    }
                end,
            }
        ),

        sorter = conf.generic_sorter(opts),
        previewer = conf.grep_previewer(opts),

        attach_mappings = attach_mappings,
    }):find()
end
local function search_by_content(attach_mappings)
    local pickers = require "telescope.pickers"
    local finders = require "telescope.finders"
    local conf = require("telescope.config").values

    opts = opts or {}
    pickers.new(opts, {
        prompt_title = "search notes by content",

        finder = finders.new_oneshot_job(
            {"ag", "^", config.home_path}, -- this is probably not the best way to do this
            {
                entry_maker = function(entry)
                    local parts = vim.split(entry, ':')

                    local filepath = vim.fn.fnamemodify(parts[1], ":p")

                    return {
                        value = entry,
                        display = entry,
                        ordinal = entry,
                        note_path = filepath,
                    }
                end,
            }
        ),

        sorter = conf.generic_sorter(opts),
        previewer = conf.grep_previewer(opts),

        attach_mappings = attach_mappings,
    }):find()
end
local function insert_link_by_title()
    search_by_title(insert_link_attach_mappings)
end
local function insert_link_by_content()
    search_by_content(insert_link_attach_mappings)
end

return {
    setup = setup,

    new_note = function(directories, focus) internal.new_note(config, directories, focus) end,
    open_index = function() internal.open_index(config) end,
    new_note_and_insert_link = function() internal.new_note_and_insert_link(config) end,
    delete_note = function() internal.delete_note(config) end,
    open_tag_index = function() internal.open_tag_index(config) end,
    follow_link = function() internal.follow_link(config) end,
    regenerate_autogenerated_sections = function() internal.regenerate_autogenerated_sections(config) end,
    search_by_title = search_by_title,
    search_by_content = search_by_content,
    insert_link_by_title = insert_link_by_title,
    insert_link_by_content = insert_link_by_content,
}
